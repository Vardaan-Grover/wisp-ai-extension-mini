function updateAutomationStatus(e) { chrome.storage.local.set({ isAutomationActive: e }) } function getAutomationStatus() { return new Promise(((e, t) => { chrome.storage.local.get(["isAutomationActive"], (a => { chrome.runtime.lastError ? t(new Error(chrome.runtime.lastError.message)) : e(a.isAutomationActive) })) })) } function updateCurrentCampaignTabId(e) { chrome.storage.local.set({ currentCampaignTabId: e }) } function getCurrentCampaignTabId() { return new Promise(((e, t) => { chrome.storage.local.get(["currentCampaignTabId"], (a => { chrome.runtime.lastError ? t(new Error(chrome.runtime.lastError.message)) : e(a.currentCampaignTabId) })) })) } function updateCampaignData({ name: e, data: t, scripts: a }) { const r = {}; Object.keys(t).map((e => { const a = self.replaceUsernameSpecialCharsEscapeWithDots(e); t[e].error || t[e].sent || (r[a] = { fullName: t[e].full_name, personalizedMessage: t[e].message, sent: t[e].sent, dmId: t[e].dmId, campaignInfoMessage: t[e].campaign_info_message }) })), chrome.storage.local.set({ campaignData: { name: e, scripts: a, data: r } }) } function getCampaignData() { return new Promise(((e, t) => { chrome.storage.local.get(["campaignData"], (a => { chrome.runtime.lastError ? t(new Error(chrome.runtime.lastError.message)) : e(a.campaignData) })) })) } function getUsernameFromDmId(e) { return new Promise(((t, a) => { chrome.storage.local.get(["campaignData"], (r => { if (chrome.runtime.lastError) a(new Error(chrome.runtime.lastError.message)); else { const a = Object.keys(r.campaignData.data).filter((t => { if (r.campaignData.data[t].dmId === e) return t }))[0]; t(a) } })) })) } function getDmIdFromUsername(e) { return new Promise(((t, a) => { chrome.storage.local.get(["campaignData"], (r => { chrome.runtime.lastError ? a(new Error(chrome.runtime.lastError.message)) : t(r.campaignData.data[e].dmId) })) })) } function getUnsentUsername() { return new Promise(((e, t) => { chrome.storage.local.get(["campaignData"], (a => { if (chrome.runtime.lastError) t(new Error(chrome.runtime.lastError.message)); else { const t = Object.keys(a.campaignData.data).filter((e => { if (!a.campaignData.data[e].sent && !a.campaignData.data[e].campaignInfoMessage) return e })); t.length > 0 ? e(t[0]) : e(null) } })) })) } function getPersonalizedScript(e) { return new Promise(((t, a) => { chrome.storage.local.get(["campaignData"], (async r => { if (chrome.runtime.lastError) a(new Error(chrome.runtime.lastError.message)); else { const a = await getUsernameFromDmId(e), n = r.campaignData.scripts, o = r.campaignData.data[a].fullName.split(" ")[0], s = r.campaignData.data[a].personalizedMessage, m = n[Math.round(Math.random() * (n.length - 1))].replace(/{{lead_name}}/g, o).replace(/{{ai_personalization}}/g, s); t(m) } })) })) } function modifySentStatusForUsername(e, t) { chrome.storage.local.get(["campaignData"], (a => { const r = a.campaignData; r.data[e].sent = t, chrome.storage.local.set({ campaignData: r }) })) } function getMessageCounter() {
  return new Promise(((e, t) => {
    chrome.storage.local.get("counter", (a => {
      if (chrome.runtime.lastError) t(new Error(chrome.runtime.lastError.message)); else {
        const t = a.counter, r = (new Date).toISOString().slice(0, 10), n = { date: r, value: 0, incrementsSince: 0, totalIncrements: 0, decidedThreshold: generateThreshold() }; if (t) { const a = t.date; a === r ? e({ date: a, value: t.value, incrementsSince: t.incrementsSince, totalIncrements: t.totalIncrements, decidedThreshold: t.decidedThreshold }) : (chrome.storage.local.set({ counter: n }), e(n)) } else//! to be removed once login page is set up
          chrome.storage.local.set({ counter: n }), e(n)
      }
    }))
  }))
} function resetTotalIncrements() { getMessageCounter().then((e => { const t = e; t.totalIncrements = 0, chrome.storage.local.set({ counter: t }) })) } async function incrementMessageCount() { return new Promise(((e, t) => { getMessageCounter().then((t => { const a = t; a.value = t.value + 1, a.incrementsSince = t.incrementsSince + 1, a.totalIncrements = t.totalIncrements + 1, chrome.storage.local.set({ counter: a }).then((() => e())) })).catch((e => t(e))) })) } function resetIncrementsAndThreshold() { getMessageCounter().then((e => { const t = e; t.incrementsSince = 0, t.decidedThreshold = generateThreshold(), chrome.storage.local.set({ counter: t }) })) } function generateThreshold() { return Math.ceil(5 * Math.random() + 7) } function setDmLimit(e) { chrome.storage.local.set({ dmLimit: e }) } function getDmLimit() { return new Promise(((e, t) => { chrome.storage.local.get(["dmLimit"], (a => { chrome.runtime.lastError ? t(new Error(chrome.runtime.lastError.message)) : e(a.dmLimit) })) })) } self.updateAutomationStatus = updateAutomationStatus, self.updateCurrentCampaignTabId = updateCurrentCampaignTabId, self.getAutomationStatus = getAutomationStatus, self.getCurrentCampaignTabId = getCurrentCampaignTabId, self.updateCampaignData = updateCampaignData, self.getCampaignData = getCampaignData, self.getUnsentUsername = getUnsentUsername, self.modifySentStatusForUsername = modifySentStatusForUsername, self.getPersonalizedScript = getPersonalizedScript, self.getUsernameFromDmId = getUsernameFromDmId, self.getDmIdFromUsername = getDmIdFromUsername, self.getMessageCounter = getMessageCounter, self.incrementMessageCount = incrementMessageCount, self.resetIncrementsAndThreshold = resetIncrementsAndThreshold;